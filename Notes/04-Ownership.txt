What Is Ownership?

    All programs have to manage the way they use a computer’s memory while running. Some languages have garbage collection; in other languages, the programmer must explicitly allocate and free the memory. 

    Rust uses a third approach: memory is managed through a system of ownership with a set of rules that the compiler checks at compile time. None of the ownership features slow down your program while it’s running.

The Stack and the Heap

    Both the stack and the heap are parts of memory that are available to your code to use at runtime, but they are structured in different ways.

    The stack stores values as last in, first out. All data stored on the stack must have a known, fixed size. Data with an unknown size at compile time or a size that might change must be stored on the heap instead. allocating on the heap.

    Because the pointer is a known, fixed size, you can store the pointer on the stack, but when you want the actual data, you must follow the pointer. 

    When your code calls a function, the values passed into the function (including, potentially, pointers to data on the heap) and the function’s local variables get pushed onto the stack. When the function is over, those values get popped off the stack.
    Keeping track of what parts of code are using what data on the heap, minimizing the amount of duplicate data on the heap, and cleaning up unused data on the heap so you don’t run out of space are all problems that ownership addresses. 

Ownership Rules
    * Each value in Rust has a variable that’s called its owner.
    * There can only be one owner at a time.
    * When the owner goes out of scope, the value will be dropped.


Illustrattion: the rules of ownership
    The types covered previously are all stored on the stack and popped off the stack when their scope is over, but we want to look at data that is stored on the heap and explore how Rust knows when to clean up that data.

    In contrast to string literal which is stored on the stack, the type "String" is allocated on the heap and as such is able to store an amount of text that is unknown to us at compile time. You can create a String from a string literal using the from function.

    Without a GC, it’s our responsibility to identify when memory is no longer being used. If we forget, we’ll waste memory. If we do it too early, we’ll have an invalid variable. If we do it twice, that’s a bug too. We need to pair exactly one allocate with exactly one free.

    Rust takes a different path: the memory is automatically returned once the variable that owns it goes out of scope. Rust calls "drop automatically at the closing curly bracket

        {
            let mut s = String::from("hello");
            s.push_str(", world!"); // push_str() appends a literal to a String
            println!("{}", s); // This will print `hello, world!`
            ...
        }               // this scope is now over, and s is no longer valid ==> the memory is automatically freed

Ways Variables and Data Interact: 

    Stack-Only Data: Copy
        let x = 5;
        let y = x;
    Both x and y are valid variables, because the data/content is an int which is located at the stack. Remember that x and y will have 2 diff location on the stack i.e changing one will not affect the other one.


    Move
    multiple variables/pointers that refere to the same data known as a "move"

        let s1 = String::from("hello");
        let s2 = s1;     // s1 is been invalid, as soon as we assign it to s2. That mean the ownership of the data is moved to s2

        Double free error: s1 "pointer" refer to the memory that holds the contents of the string "hello", and when we assign s1 to s2 (shallow copy), if we just copy s1 to s2, then both of them will refer to the same "allocated memory". This is a problem: when s2 and s1 go out of scope, they will both try to free the same memory. This is known as a double free error.

        To ensure memory safety, there’s one more detail to what happens in this situation in Rust. Instead of trying to copy the allocated memory, Rust considers s1 to no longer be valid and, therefore, Rust doesn’t need to free anything when s1 goes out of scope. That solves our problem! With only s2 valid, when it goes out of scope, it alone will free the memory, and we’re done.
        Assigning s1 to s2 and invalidating the first variable "s1" is called "move", instead of being called a shallow copy.

    Clone
    deeply copy the heap data 
        let s1 = String::from("hello");
        let s2 = s1.clone();

        s1 and s2 refer to diff "allocated memory location"



Traits Copy vs Drop
    We can place "Copy trait" on types like integers (or any group of simple data type) that are stored on the stack, if a type has the Copy trait, an older variable is still usable after assignment. 
    Rust won’t let us annotate a type with the "Copy trait" if the type, or any of its parts, has implemented the "Drop trait". 

    Here are some of the types that implements "Copy trait":
    - All the simple scalar types.
    - Array/tuples, if they only contain types that are also Copy. For example, (i32, i32) is Copy, but (i32, String) is not.



Ownership and Functions
    let mut s = String::from("wer");
    some_function(s);
    s.push_str("tyu"); // Err borrow of moved value: `s`, value borrowed here after move

    let mut x = 5;  
    some_function(x);  
    x+=1;         // OK, because x is int "the value is stored at the stack"

  

Return Values and Scope
    The ownership of a variable follows the same pattern every time: assigning a value to another variable moves it. When a variable that includes data on the heap goes out of scope, the value will be cleaned up by drop unless the data has been moved to be owned by another variable.

    let s1 = String::from("hello");
    let s2 = takes_and_gives_back(s1); this will invalidate s1 and move the ownership to the function's param

    fn takes_and_gives_back(a_string: String) -> String { 
        a_string  
        }

Taking ownership and then returning ownership with every function is a bit tedious. What if we want to let a function use a value but not take ownership? Luckily for us, Rust has a feature for this concept, called references.


*****************************************************************************************************

References and Borrowing

    & are reference, and it allow you to refer to some value without taking ownership of it.

    fn main() {
        let s1 = String::from("hello");
        let len = calculate_length(&s1);            // &s1, create a reference that refers to the value of s1
        println!("The length of '{}' is {}.", s1, len);
    }

    fn calculate_length(param: &String) -> usize {   // use & to indicate that the parameter "param" is a reference
        s.len()
    }

    We call having references as function parameters borrowing. As in real life, if a person owns something, you can borrow it from them. When you’re done, you have to give it back.

Notice that:
    1- we can have mutable/immutable ref for a mutable variable.
    2- but we can NOT have mutable ref for an immutable variable. 

Mutable References
    let mut s = String::from("hello");----------1
    change(&mut s);-----------------------------2
    fn change(some_string: &mut String) {...}---3

    1. the variable has to be mut. 
    2. we had to create a mutable reference with "&mut s" and 
    3. the function's param has to be a mutable reference "&mut".




    Mutable references' restriction: 

    let mut s = String::from("hello");

        1-you can have only one mutable reference to a particular piece of data in a particular scope. This code will fail:
            let r1 = &mut s;
            let r2 = &mut s; // Err cannot borrow `s` as mutable more than once at a time
            println!("{}, {}", r1, r2);

            The benefit of having this restriction is that Rust can prevent data races at compile time. 

        2-combining mutable and immutable references
            let r1 = &s;     // no problem
            let r2 = &s;     // no problem
            let r3 = &mut s; // BIG PROBLEM Err cannot borrow `s` as mutable because it is also borrowed as immutable
            println!("{} and {}", r1, r2);


        But the flwg will work just fine:

            fn main() {
                let r1 = &s; // no problem
                let r2 = &s; // no problem
                println!("{} and {}", r1, r2); // r1 and r2 are no longer used after this point

                let r3 = &mut s; // no problem
                println!("{}", r3);
            }
        The scopes of the immutable references r1 and r2 end after the println! where they are last used, which is before the mutable reference r3 is created. These scopes don’t overlap, so this code is allowed.

    However, multiple immutable references are okay because no one who is just reading the data has the ability to affect anyone else’s reading of the data.
        let r1 = &s; // no problem
        let r2 = &s; // no problem
        println!("{} and {}", r1, r2);



Dangling References 
When a function returns an owned variable by    ref      instead of  giving the ownership, 
The    function returns an owned variable by "borrowing" instead of      "moving"

    fn main() {
        let reference_to_nothing = dangle();
    }

    fn dangle() -> &String { // missing lifetime specifier,, This err refers to a feature we haven’t covered yet "lifetimes".
        let s = String::from("hello");
        &s
    }// this function's return type contains a borrowed value, but there is no value for it to be borrowed from.

    Because s is created inside dangle, when the code of dangle is finished, s will be deallocated. But we tried to return a reference to it. That means this reference would be pointing to an invalid String. 

    Solution:
      change the definition of the func to return the variable "move the variable", instead of returning a ref

      fn no_dangle() -> String {
        let s = String::from("hello");
        s
      }

      This works without any problems. Ownership is moved out, and nothing is deallocated.


The Rules of References

Let’s recap what we’ve discussed about references:

    At any given time, you can have either one mutable reference or any number of immutable references.
    References must always be valid.

*****************************************************************************************************

The Slice Type

    String Slices
        A string slice is a reference to part of a String, and it looks like this:
            let s = String::from("hello world");
            let hello = &s[0..5];
            let world = &s[6..11];

            let slice = &s[3..]; // lo world
            let slice = &s[..];  // hello world


        Note the flwg:
            let mut a  = String::from("abcdef");
            let b =&a[0..2];
            a.clear();                         // fn clear(&mut self)
                                               // cannot borrow `a` as mutable because it is also borrowed as immutable
            println!("the value of b is: {}", b); 

            The err is because 
              1-clear needs to truncate the String, it needs to get a mutable reference. Rust disallows this, and compilation fails.
              2-we used "b" in println!, after we cleared "a".


      String Literals Are Slices
        let s = "Hello, world!";
        string literals are stored inside a binary. The type of s here is &str: it’s a slice pointing to that specific point of the binary. This is also why string literals are immutable; &str is an immutable reference.

        we can re-write the definition of
            fn first_word(s: &String) -> &String {...} 
        to be more general
            fn first_word(s: &str) -> &str {...}

        This allows us to use the same function on both &String values and &str values.
            let st1 = String::from("123");
            let st2 = String::from("123");
            let s = "123";

            println!("{}", practice::first_word(&st1));
            println!("{}", practice::first_word(&st2[..]));
            println!("{}", practice::first_word(s));
    


    Other Slices

    String slices, as you might imagine, are specific to strings. But there’s a more general slice type, too.
    let a = [1, 2, 3, 4, 5];
    let slice = &a[1..3];



    NOTE:     
        let st = String::from("åbc");
        let ch = &st[0..1]; // panic: because "å" takes 2 bytes, but we requested just 1
        let ch = &st[0..2]; // ch = 'å'
        println!("{}", st.len()); // 4



    Mutable slices

        let mut a = [1, 2, 3, 4, 5];
        let slice = &mut a[..]; //      note &mut,, 
        //let mut slice= &a[..] // Err This will NOT work
        slice[0]=100;

        println!("{:#?}", a );


