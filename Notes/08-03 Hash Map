use std::collections::HashMap;

Creating a New Hash Map
    let mut scores = HashMap::new();
    scores.insert(String::from("Blue"), 10);

    Another way of constructing a hash map is by using the "collect" method on a vector of tuples, where each tuple consists of a key and its value. 

    let teams  = vec![String::from("Blue"), String::from("Yellow")];
    let initial_scores = vec![10, 50];
    let scores_tuples = teams.iter().zip(initial_scores.iter());
    let scores: HashMap<_, _> = scores_tuples.collect();

Hash Maps and Ownership
    For types that implement the Copy trait, like i32, the values are copied into the hash map. For owned values like String, the values will be moved and the hash map will be the owner of those values.


Accessing Values in a Hash Map

  "get" returns an Option<&V>
    let team_name = String::from("Blue");
    let score = scores.get(&team_name);

    for (key, value) in &scores {
        println!("{}: {}", key, value);
    }







match comp_map.get(&dep) {
  Some(dep_vec)=>  dep_vec.push(name) ,
`dep_vec` is a `&` reference, so the data it refers to cannot be borrowed as mutable

    get_mut

     match comp_map.get_mut(&dep) {
          Some(dep_vec)=> dep_vec.push(name) ,
          _ => (),












Updating a Hash Map
  Overwriting a Value
    scores.insert(String::from("Blue"), 10);
    scores.insert(String::from("Blue"), 25);
    println!("{:?}", scores);
  


  Only Inserting a Value If the Key Has No Value (Using the entry)
    let mut scores = HashMap::new();
    scores.insert(String::from("Blue"), 10);

    scores.entry(String::from("Yellow")).or_insert(50);
    scores.entry(String::from("Blue")).or_insert(50);    // or_insert will be ignored here

    println!("{:?}", scores); // prints {"Yellow": 50, "Blue": 10}



  Updating a Value Based on the Old Value
    let text = "hello world wonderful world";
    let mut map = HashMap::new();

    for word in text.split_whitespace() {
        let count = map.entry(word).or_insert(0); // or_insert method returns a mutable reference (&mut V) 
        *count += 1;
    }
    println!("{:?}", map);


BuildHasher
  By default, HashMap uses a “cryptographically strong” hashing function, if you find that the default hash function is too slow for your purposes, you can switch to another function by specifying a different hasher. 

  Given a list of integers, use a vector and return the mean (the average value), median (when sorted, the value in the middle position), and mode (the value that occurs most often; a hash map will be helpful here) of the list.