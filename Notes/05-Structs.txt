Using Structs to Structure Related Data
A struct, or structure, is a custom data type that lets you name and package together multiple related values that make up a meaningful group. 
To define a struct, we enter the keyword struct and name the entire struct.
    struct User {
        username: String,
        email: String,
        sign_in_count: u64,
        active: bool,
    }

Ownership of Struct Data
    Notice that we used the owned String type (for username and email) rather than the &str string slice type. This is a deliberate choice because we want instances of this struct to own all of its data. It’s possible for structs to store references to data owned by something else, but to do so requires the use of lifetimes. // ReadMore chapter10


create an instance 
    let user1 = User {
        email: String::from("someone@example.com"),
        username: String::from("someusername123"),
        active: true,
        sign_in_count: 1,
    };



If the instance is mutable, we can change a value by using the dot notation, for ex. we can change the value in the email field of a mutable User instance.
    user1.email = String::from("anotheremail@example.com");


The field init shorthand syntax 
Because the email field and the email parameter have the same name, we only need to write email rather than email: email.

    fn some_function(email: String, username: String) -> User {
        let user1 = User {
            email, // 
            username,
            active: true,
            sign_in_count: 1,
        }
        ...
        user1
    }

 Struct Update Syntax
    The syntax .. specifies that the remaining fields not explicitly set should have the same value as the fields in the given instance.
    let user2 = User {
        email: String::from("another@example.com"),
        username: String::from("anotherusername567"),
        ..user1
    }; 
    Both user1 and user2 are valid, refer to diff alloc data, and they has a different values for email and username.

    BUT!!
    let user2 = User {
        email: String::from("another@example.com"),
        ..user1
    };
    Both user1 and user2 are valid, refer to diff alloc data, BUT BUT BUT,, user1.name is "moved" because its String.

Tuple Structs (sturct without Named Fields)
    struct Color(i32, i32, i32);
    struct Point(i32, i32, i32);

    let blue = Color(0, 0, 255);
    let origin = Point(0, 0, 0);

    Each struct you define is its own type, even though the fields within the struct have the same types. For example, a function that takes a parameter of type Color cannot take a Point as an argument.

    You can destructure the variable "blue" 's fields, by using  "." followed by the index to access an individual value, and so on.

    println!("{}", blue.2); // prints 255


Unit-Like Structs Without Any Fields  // ReadMore chapter10
    You can also define structs that don’t have any fields! These are called unit-like structs because they behave similarly to (), the unit type. Unit-like structs can be useful in situations in which you need to implement a trait on some type but don’t have any data that you want to store in the type itself.

******************************************************************************************

An Example Program Using Structs

struct Rectangle {
    width: u32,
    height: u32,
}

fn main() {
    let rect1 = Rectangle { width: 30, height: 50 };

    // try to print our instance of Rectangle
    println!("rect1 is {}", rect1); //  Err `Rectangle` doesn't implement `std::fmt::Display`
}

with structs, the way println! should format the output is less clear because there are more display possibilities: Do you want commas or not? Do you want to print the curly brackets? Should all the fields be shown?
Rust does include functionality to print out "Rectangle", but we have to explicitly opt in to make that functionality available for our struct. 
To print out an instance of "Rectangle", we've to:
    1- add the annotation #[derive(Debug)] to "Rectangle"
    2- use the specifier :? OR :#?

    #[derive(Debug)]
    struct Rectangle {
        width: u32,
        height: u32,
    }

    specifier :?
        specifier :? inside the curly brackets tells println! we want to use an output format called Debug. The Debug trait enables us to print our struct in a way that is useful for developers.
    
    specifier :#?
        The same as :? , but for pretty-print.

    ...
    let rect1 = Rectangle { width: 30, height: 50 };
    println!("rect1 is {:?}", rect1); // prints: rect1 is Rectangle { width: 30, height: 50 }
    ...



    println!("rect1 is {:#?}", rect1); //prints rect1 is Rectangle {
                                                    width: 30,
                                                    height: 50
                                                }


******************************************************************************************

Method Syntax
    Methods are similar to functions: they’re declared with the fn keyword and their name, but different from functions in that they’re defined within the context of a struct and their first parameter is always self, which represents the instance of the struct the method is being called on.

    Let’s change the area function that has a Rectangle instance as a parameter and instead make an area method defined on the Rectangle struct.

        #[derive(Debug)]
        struct Rectangle {
            width: u32,
            height: u32,
        }

        impl Rectangle {
            fn area(&self) -> u32 {
                self.width * self.height
            }
        }
    
    Notice that all the methods of an struct, has to be:
        1- defined inside (impl block), note that each struct is allowed to have multiple impl blocks. why impl blocks are useful? read Chapter 10.
        2- the first param is always "self", "&self" or "&mut self"
        3- we can access a "field" via self.field_name.
    
    Methods can take ownership of self, borrow self immutably as we’ve done here, or borrow self mutably, just as they can any other parameter.

    If we wanted to change the instance that we’ve called the method on as part of what the method does, we’d use &mut self as the first parameter.

    Having a method that takes ownership of the instance by using just self as the first parameter is rare; this technique is usually used when the method transforms self into something else and you want to prevent the caller from using the original instance after the transformation.

    Methods with More Parameters
        we want an instance of Rectangle to take another instance of Rectangle and return true if the second Rectangle can fit completely within self; otherwise it should return false. 

        impl Rectangle {
            fn can_hold(&self, other: &Rectangle) -> bool {
                self.width > other.width && self.height > other.height
            }
        }



    Associated Functions "static methods"
        Another useful feature of impl blocks is that we’re allowed to define functions within impl blocks that don’t take self as a parameter. These are called associated functions. They don’t have an instance of the struct to work with. You’ve already used the String::from associated function.

        impl Rectangle {
            fn square(size: u32) -> Rectangle {
                Rectangle { width: size, height: size }
            }
        }

        Associated functions are often used for constructors that will return a new instance of the struct. 

    