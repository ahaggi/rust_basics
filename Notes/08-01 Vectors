Common Collections
The data these collections point to is stored on the heap
  - A vector: growable array.
  - A string 
  - A hash map 

Vectors

  Creating a New Vector:
    With the init of an empty vector, we have to declare which type we intend to store; and make it "mut".
    let mut v: Vec<i32> = Vec::new();  // remember "mut"
    
    Rust can often infer the type of value you want to store once you insert values.Rust provides the vec! macro for convenience. 
    let v = vec![1, 2, 3];
    eqv to:
    let mut v: Vec<i32> = Vec::new();
    v.push(1);  v.push(2);  v.push(3);

    **************************************************
    * IMPORTANT                                      *
    * let v: Vec<i32> = (1..11).map(|x| x).collect();*
    **************************************************

  Vector and Ownership:
    For types that implement the Copy trait, like i32, the values are copied into the vector. For owned values like String, the values will be moved and the vector will be the owner of those values.
      let st = String::from("ownedValue");
      let mut v2 = vec![st];
      // "st" is invalid at this point, (move) occurs because `std::string::String`,  does not implement the `Copy` trait

  Dropping a Vector Drops Its Elements:
    When the vector gets dropped, all of its contents are also dropped, meaning those integers it holds will be cleaned up. 
  
  Reading Elements of Vectors
    Reading an elm from a vector is always by ref. There are two ways to reference a value stored in a vector:

    let mut v3 = vec![1];

    1- Using [] : panicks with "out of range" index
       let elm = &v3[0];
       // let elm = v3[0];    panick becuase we did not use "&" borrowing
       // let elm = &v3[100]; panick becuase the index is out of range

    2- Using "get": returns Option<&T>, which mean it does not cuase panick. It returns a Some( & element ) or None.
        match v3.get(0) {
            Some(elm) => println!("The element is {}", elm),
            None => println!("There is no element."),
        }
        let elm = v3.get(100); it returns None without panicking
       


  Ownership and borrowing rules 
    Consider this:
    let mut v = vec![1, 2, 3, 4, 5];

    1- cannot borrow `v` as mutable because it is also borrowed as immutable
      let first = &v[0];          -------- immutable borrow occurs here
      v.push(6);                  --------   mutable borrow occurs here
      println!("The first element is: {}", first); ---- immutable borrow later used here


    2- cannot borrow `v` as mutable more than once at a time
      let mut first = &mut v[0];  -------- first mutable borrow occurs here
      v.push(6);                  -------- second mutable borrow occurs here
      println!("The first element is: {}", first); -------- first borrow later used here

    The right way:
      let first = &v[0];
      println!("The first element is: {}", first); 
      v.push(6);
    
    why should a reference to the first element care about what changes at the end of the vector? 
      adding a new element onto the end of the vector might require allocating new memory and copying the old elements to the new space, which may cuase the reference to the first element to point to deallocated memory. 
      



  Using an Enum to Store Multiple Types
    enum SpreadsheetCell {
      Int(i32),
      Float(f64),
      Text(String),
    }

    let row = vec![
        SpreadsheetCell::Int(3),
        SpreadsheetCell::Text(String::from("blue")),
        SpreadsheetCell::Float(10.12),
    ];








  Diff between (for i in  v)  and (for i in  &v)
      for i in &v {
          println!("{}", i);
      }
      // try to do something with v
      // v is valid because "borrow" occurs in the (for-statment)

      for i in v {
          println!("{}", i);
      }
      // try to do something with v
      // v is invalid because "move" occurs in the (for-statment)


  Iterating over the Values in a Vector
    let v = vec![100, 32, 57];

      for i in &v {
          println!("{}", i);
      }

      for i in v {         //  this will cuase panick, if we try to use v later.
          println!("{}", i);
      }
    
      for i in v.iter() {  
          println!("{}", i);
      }

  We can iterate through all of the elements rather than use indices to access one at a time. 

      for i in &mut v {
          *i += 50;
      }

      for i in  v.iter_mut() {
          *i += 50;
          println!("{}", i);
      }


  for Loops and IntoIterator:
    Rust's for loop syntax is actually sugar for iterators. Here's a basic example of for:
      let values = vec![11, 22, 33, 44, 55];
      match IntoIterator::into_iter(values) {
          mut iter => loop {
              let elm;
              match iter.next() {
                  Some(val) => elm = val,
                  None => break,
              };

              println!("{}", elm);
          },
      };





  let mut iterator = x.iter();

  assert_eq!(iterator.next(), Some(&1));
  assert_eq!(iterator.next(), Some(&2));
  assert_eq!(iterator.next(), Some(&4));
  assert_eq!(iterator.next(), None);
