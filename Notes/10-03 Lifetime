Lifetimes
    lifetimes ensure that references are valid as long as we need them to be. Let’s look at how lifetimes do that.

    The concept of lifetimes is somewhat different from tools in other programming languages, arguably making lifetimes Rust’s most distinctive feature. 

    Most of the time, lifetimes are implicit and inferred.

    The main aim of lifetimes is to prevent dangling references
        {
            let r;
            {
                let x = 5;
                r = &x;        
            } // now r is refering to a dangling ref x
            println!("r: {}", r);
        }
    Let us say that r has a lifetime ('a) and x has ('b); As you can see, the inner 'b block is much smaller than the outer 'a lifetime block. The program is rejected because 'b is shorter than 'a.

    Lifetimes on function or method parameters are called input lifetimes, and lifetimes on return values are called output lifetimes.
    
    The Borrow Checker
        The Rust compiler has a borrow checker that compares scopes to determine whether all borrows are valid. 
    

Lifetimes in Functions

    * Life time can be inferred implicitly: if a funciton param is a ref, and (after some computation) it returns the same ref.
    * Life time has to be declared explicitly: if a funciton param are more than one ref, and DEPENDING on some computation, it returns one of them. why?
        because the borrow checker does not know which lifetime the return value suppose to has, niether if the references in the param has the same lifetime "declared in the same scope".


        fn longest(x: &str, y: &str) -> &str {
            if x.len() > y.len() {
                x
            } else {
                y
            }
        }   
        The problem is the borrow checker does not know which lifetime the return value suppose to has, niether if the references in the param has the same lifetime "declared in the same scope".

        example:
            panic: because x and y has diff lifetimes and the function "longest(..)" does not has lifetime annotation
            {
                let res;
                let x = "abc".as_str();
                {
                    let y = "abcd".as_str();
                    res = longest(&x , &y)
                }// ref to y is invalidated here
                println!("result is {}", res);
            }
    

    Lifetime Annotation Syntax
        We place lifetime parameter annotations after the & of a reference, using a space to separate the annotation from the reference’s type
            &i32        // a reference
            &'a i32     // a reference with an explicit lifetime
            &'a mut i32 // a mutable reference with an explicit lifetime
        
        fn longest<'a>(x: &'a str, y: &'a str) -> &'a str {...}

        The function signature now tells Rust that for some lifetime 'a . Note that the function doesn’t need to know exactly how long x and y will live, only that some scope can be substituted for 'a that will satisfy this signature.
        
    



    Lifetime Annotations in Struct Definitions

        If a member of a stuct is a ref, we need to have a "lifetime specifier" on the struct. 

        struct Words{ // Err missing lifetime specifier
            x: & str,
            ...
        }

        struct Words<'a> { // Ok!
            x: &'a str,
            ...
        }

        This annotation means an instance of "Words" can’t outlive the reference it holds in its "x" field.

            let b: String = "word1".to_string();
            let n = Words { x: &b, y: "word2".to_string() };

            let move_b = b; // we moved "b" here.

            println!("{:#?}", n); // We can't use "n" because the ref of "b" is been invalid 






    Lifetime Annotations in Method Definitions
        impl<'a> Words<'a> {
            ...
        }




    ****************************************************************************************
    The Static Lifetime
        'static reference can live for the entire duration of the program. All string literals have the 'static lifetime.

        let s: &'static str = "I have a static lifetime.";

        IMPORTANT:
            You might see suggestions to use the 'static lifetime in error messages. But before specifying 'static as the lifetime for a reference, think about whether the reference you have actually lives the entire lifetime of your program or not. You might consider whether you want it to live that long, even if it could. Most of the time, the problem results from attempting to create a dangling reference or a mismatch of the available lifetimes. In such cases, the solution is fixing those problems, not specifying the 'static lifetime.
    ****************************************************************************************
        