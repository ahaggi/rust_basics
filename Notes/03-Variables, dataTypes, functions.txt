3.1 Variables
Variables and Mutability
	by default variables are immutable in Rust. However, you still have the option to make your variables mutable by using the keyword "mut". i.e let mut x = 5; 
	In addition to allowing this value to change, mut conveys intent to future readers of the code by indicating that other parts of the code will be changing this variable value.

Differences Between Variables and Constants
	- use "const" keyword instead of the "let" keyword, and the type of the value must be annotated. 
	- can't use mut with constants. Constants aren’t just immutable by default—they’re always immutable.
	- constants can be declared in any scope, including the global scope.
	- constants may be set only to a constant expression, not the result of a function call or any other value that could only be computed at runtime

Shadowing
	you can declare a new variable with the same name as a previous variable, and the new variable shadows the previous variable.
	we can perform a few transformations on an immutable's value, and keeping it "immutable" after shadowing.
	Example:
	    let x = 5;      // Notice how "x" is immutable
	    let x = x + 1;  // shadowing,, notice the repeating the use of "let"
	    println!("The value of x is: {}", x);  
	    // prints "The value of x is: 6"

	This feature is often used in situations in which you want to convert a value from one type to another type. 
	Example:
		- Parsing String to an u32
		  let's say we have a variable "some_variable" of type String, and we want to parse it to an int(i32),
		  Shadowing lets us reuse the "some_variable" variable name for the int value, rather than forcing us to create two unique variables, such as "some_variable_str" & "some_variable_int".
			  let some_variable = "abcd";
			  let some_variable = some_variable.len();

************************************************************************************
************************************************************************************

3.2 Data type
Every value in Rust is of a certain data type, which tells Rust what kind of data is being specified. We’ll look at two data type subsets: scalar and compound.


Scalar Types
Rust has four primary scalar types: integers, floating-point numbers, Booleans, and characters. 

	Integer Types 
		8,16,32,64,128 bits (signed integer types start with i, instead of u), Additionally, the isize and usize types depend on the kind of computer your program is running on: 64 bits if you’re on a 64-bit architecture and 32 bits if you’re on a 32-bit architecture.

	Floating-Point Types
		Rust’s floating-point types are f32 and f64

	Numeric Operations: Note that both operands have to be of the same type,, i.e cannot add `u32` to `i32`.


	The Boolean Type
		Booleans are one byte in size. 

	The Character Type
		Rust’s char type is four bytes in size, which means it can represent a lot more than just ASCII. Accented letters; Chinese, Japanese, and Korean characters; emoji; and zero-width spaces are all valid char values in Rust. 



Compound Types
Compound types can group multiple values into one type. Rust has two primitive compound types: tuples and arrays.

	The Tuple Type
		A tuple is a general way of grouping together some number of other values with a variety of types into one compound type. Tuples have a fixed length: once declared, they cannot grow or shrink in size.
		let tup: (i32, f64, char) = (500, 6.4, 'a'); // with type annotation
		let tup = (500, 6.4, 'a');					// without type annotation

		we can use pattern matching to destructure a tuple value
		let (x, y, z) = tup;

		In addition to destructuring through pattern matching, we can access a tuple element directly by using a period (.) followed by the index 
		let i32_value = tup.0;
		let f64_value = tup.1;
		let char_value = tup.2;

	The Array Type
		Arrays in Rust are different from arrays in some other languages because arrays in Rust have a fixed length, like tuples.
		Arrays are useful when you want your data allocated on the stack rather than the heap.
		A vector is a similar collection type provided by the standard library that is allowed to grow or shrink in size.
			let a = [1, 2, 3, 4, 5];
			let a: [i32; 5] = [1, 2, 3, 4, 5];  // notice semicolon between type and length

		create an array that contains the same value for each element
			let a = [1,1,1,1,1];
			let a = [1; 5];

		When you attempt to access an element using indexing, Rust will check that the index you’ve specified is less than the array length. If the index is greater than or equal to the array length, Rust will panic.


************************************************************************************
************************************************************************************

3.3 Functions
In function signatures, you must declare the type of each parameter. 

Requiring type annotations in function definitions means the compiler almost never needs you to use them elsewhere in the code to figure out what you mean.????


Rust statements and expression
Calling a function is an expression. Calling a macro is an expression. The block that we use to create new scopes, {}, is an expression, for example:

    let y = {
        let x = 3;
        x + 1
    };
    That value 4 gets bound to y. Note the x + 1 line without a semicolon at the end, which is unlike most of the lines you’ve seen so far. Expressions do not include ending semicolons. If you add a semicolon to the end of an expression, you turn it into a statement, which will then not return a value.

Functions with Return Values
we declare the type of a function after an arrow (->). 

In Rust, the return value of the function is synonymous with the value of the final expression in the block of the body of a function. You can return early from a function by using the return keyword and specifying a value, but most functions return the last expression implicitly

	fn some_function() -> i32 {
		5 // notice no semicolon, returns 5
	}

	fn some_function() -> i32 {
		5 ; // Err expected type `i32` found type `()` ,,, implicitly returns `()` as its body has no tail or `return` expression
	}

	fn some_function() -> i32 {
		return 5; // returns 5
	}


************************************************************************************
************************************************************************************


3.5 Control Flow

if Expressions
	Using too many else if expressions can clutter your code, so if you have more than one, you might want to refactor your code. Chapter 6 describes a powerful Rust branching construct called match for these cases.

	`if` expressions without `else` evaluate to `()`

	Because if is an expression, we can use it on the right side of a let statement
			let number = if condition {
				5
			} else {
				6
			}

	"curly brackets"/blocks are not optional, we will call each block "arm"

	The values that have the potential to be results from each arm of the "if" expression must be the same type; in the prev example, the results of both the "if" & "else"  arms were i32 integers.

	let number = if condition {
        5
    } else {
        "six" // Err if and else have incompatible types,, expected integral variable, found &str
    };

Repetition with Loops
	Rust has three kinds of loops: loop, while, and for. 
	Rust provides a way to break out of a loop. You can place the "break" keyword within the loop to tell the program when to stop executing the loop.

	Using loop in "let" statement
		you might need to pass the result of that operation to the rest of your code. To do this, you can add the value you want returned after the break expression

		let mut counter = 0;
		let result = loop {
			counter += 1;
			...
			break counter * 2;
		};

	Conditional Loops with while
	This loop type could be implemented using a combination of loop, if, else, and break; 
		while number != 0 {
			...
		}
	
	Looping Through a Collection 

		let a = [10, 20, 30, 40, 50];
		while index < a.len() {
			println!("the value is: {}", a[index]);
			index += 1;
		}

		for element in a.iter() {
			println!("the value is: {}", element);
		}