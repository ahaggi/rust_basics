Iterators, a way of processing a series of elements

    The Iterator trait only requires implementors to define one method: the next method, which returns one item of the iterator at a time wrapped in Some and, when iteration is over, returns None.

        let v1 = vec![1, 2, 3];

    let mut v1_iter = v1.iter();
    assert_eq!(v1_iter.next(), Some(&1));
    assert_eq!(v1_iter.next(), Some(&2));
    assert_eq!(v1_iter.next(), Some(&3));
    assert_eq!(v1_iter.next(), None);

    Note that the values we get from the calls to next are "immutable references" to the values in the vector. 
    If we want to create an iterator that takes ownership of "v1" and returns owned values, we can call into_iter instead of iter. 


    Iterator adaptors
        allow you to change iterators into different kinds of iterators. You can chain multiple calls to iterator adaptors to perform complex actions. for ex. map(...), filter(...) ,enumerate() , ..etc.
        
        IMPORTANT: This code doesn’t do anything
            let v1: Vec<i32> = vec![1, 2, 3];
            v1.iter().map(|x| x + 1);
            v1.iter().filter(|x| x > 1);
            v1.iter().filter(|x| x.is_positive())
            v1.iter().enumerate();
        Why?
            Because  "map, filter, enumerate .." produces a lazy iterator just like "iter()", so to iterate over the collection we've to consume the iterator.




    Consuming adaptors
        Methods that call next in their definition, we can consume an iterator with (for-loop, sum(), fold(..), collect(), for_each(..) .. etc)
            let v1 = vec![1, 2, 3];
            let total: i32 = v1.iter().sum();
            let total: i32 = v1.iter().fold(0, |acc, x| acc + x);
            assert_eq!(total, 6);



Creating Our Own Iterators with the Iterator Trait
    As previously mentioned, the only method you’re required to provide a definition for is the next method. Once you’ve done that, you can use all other methods that have default implementations provided by the Iterator trait!
    See https://doc.rust-lang.org/book/ch13-02-iterators.html#creating-our-own-iterators-with-the-iterator-trait

    Why the decleration/definition of the Iterator trait is:
        pub trait Iterator {
            type Item;
            ...
        }
    
      and not:

        pub trait Iterator<T> {
            type T;
            ...
        }
      because:
        https://doc.rust-lang.org/book/ch19-03-advanced-traits.html#specifying-placeholder-types-in-trait-definitions-with-associated-types





https://hermanradtke.com/2015/06/22/effectively-using-iterators-in-rust.html


    iter() iterates over the items by reference
    into_iter() iterates over the items, moving them into the new scope
    iter_mut() iterates over the items, giving a mutable reference to each item

So for x in my_vec { ... } is essentially equivalent to my_vec.into_iter().for_each(|x| ... ) 
both move the elements of my_vec into the ... scope.

If you just need to "look at" the data, use iter, if you need to edit/mutate it, use iter_mut, and if you need to give it a new owner, use into_iter.


    for el in v.into_iter() {}
    v;                      // Err v is NOT valid

    for el in v.iter() {}
    v;                      // v is valid 
